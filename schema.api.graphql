schema {
  query: Query
  mutation: Mutation

}

type Query {

  getImageUploadUrl(extension: String, contentType: String): AWSURL!

  getMyProfile: MyProfile!

  getProfile(screenName: String!): OtherProfile!

  getTweets(userId: ID!, limit: Int!, nextToken: String!): TweetsPage!

  getLikes(userId: ID!, limit: Int!, nextToken: String!): TweetsPage!

  getFollowers(userId: ID!, limit: Int!, nextToken: String!): ProfilesPage!

  getFolling(userId: ID!, limit: Int!, nextToken: String!): ProfilesPage!

  getMyTimeline(limit: Int!, nextToken: String!): TweetsPage!


}

type Mutation {
  editMyProfile(newProfile: ProfileInput!): MyProfile!

  tweet(text: String!): Tweet!

  like(tweetId: ID!): Boolean!

  like(tweetId: ID!): Boolean!

  retweet(tweetId: ID!): Boolean!

  unRetweet(tweetId: ID!): Boolean!

  reply(tweetId: ID!, text: String!): Reply!

  follow(userId: ID!): Boolean!

  unFollow(userId: ID!): Boolean!
}

input ProfileInput {
  name: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthDate: AWSDate
}

interface IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthDate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCounts: Int!
}

type MyProfile implements IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthDate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCounts: Int!
}

type OtherProfile implements IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthDate: AWSDATE
  createdAt: AWSDATETIME!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCounts: Int!
  following: Boolean!
  followedBy: Boolean!
}

interface ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
}

type Tweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type Reply implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  inReplyToTweet: ITweet!
  inReplyToUsers: [IProfile]!
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type ReTweet implements ITweet {
  retweetOf: ITweet!

}

type TweetsPage {
  tweets: [ITweet!]
  nextToken: String
}

type ProfilesPage {
  profiles: [IProfile!]
  nextToken: String!
}